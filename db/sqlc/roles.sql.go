// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: roles.sql

package db

import (
	"context"
	"database/sql"
)

const addUserRole = `-- name: AddUserRole :execresult
insert into user_roles (user_id, role_id)
values (? , ?)
`

type AddUserRoleParams struct {
	UserID int32 `json:"user_id"`
	RoleID int32 `json:"role_id"`
}

func (q *Queries) AddUserRole(ctx context.Context, arg AddUserRoleParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, addUserRole, arg.UserID, arg.RoleID)
}

const deleteRole = `-- name: DeleteRole :execresult
delete from user_roles
where user_id = ?
`

func (q *Queries) DeleteRole(ctx context.Context, userID int32) (sql.Result, error) {
	return q.db.ExecContext(ctx, deleteRole, userID)
}

const getRoleIdByDetail = `-- name: GetRoleIdByDetail :one
select id, detail from role_details
where detail = ?
limit 1
`

func (q *Queries) GetRoleIdByDetail(ctx context.Context, detail string) (RoleDetail, error) {
	row := q.db.QueryRowContext(ctx, getRoleIdByDetail, detail)
	var i RoleDetail
	err := row.Scan(&i.ID, &i.Detail)
	return i, err
}
